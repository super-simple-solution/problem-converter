{
  "content": "### \ud83d\udcfa \u89c6\u9891\u9898\u89e3  \n![1.\u4e24\u6570\u4e4b\u548c.mp4](4547de8a-5963-4caf-9281-c22ee751ab12)\n\n### \ud83d\udcd6 \u6587\u5b57\u9898\u89e3\n#### \u65b9\u6cd5\u4e00\uff1a\u66b4\u529b\u679a\u4e3e\n\n**\u601d\u8def\u53ca\u7b97\u6cd5**\n\n\u6700\u5bb9\u6613\u60f3\u5230\u7684\u65b9\u6cd5\u662f\u679a\u4e3e\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e00\u4e2a\u6570 `x`\uff0c\u5bfb\u627e\u6570\u7ec4\u4e2d\u662f\u5426\u5b58\u5728 `target - x`\u3002\n\n\u5f53\u6211\u4eec\u4f7f\u7528\u904d\u5386\u6574\u4e2a\u6570\u7ec4\u7684\u65b9\u5f0f\u5bfb\u627e `target - x` \u65f6\uff0c\u9700\u8981\u6ce8\u610f\u5230\u6bcf\u4e00\u4e2a\u4f4d\u4e8e `x` \u4e4b\u524d\u7684\u5143\u7d20\u90fd\u5df2\u7ecf\u548c `x` \u5339\u914d\u8fc7\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u518d\u8fdb\u884c\u5339\u914d\u3002\u800c\u6bcf\u4e00\u4e2a\u5143\u7d20\u4e0d\u80fd\u88ab\u4f7f\u7528\u4e24\u6b21\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u5728 `x` \u540e\u9762\u7684\u5143\u7d20\u4e2d\u5bfb\u627e `target - x`\u3002\n\n**\u4ee3\u7801**\n\n```Java [sol1-Java]\nclass Solution {\n    public int[] twoSum(int[] nums, int target) {\n        int n = nums.length;\n        for (int i = 0; i < n; ++i) {\n            for (int j = i + 1; j < n; ++j) {\n                if (nums[i] + nums[j] == target) {\n                    return new int[]{i, j};\n                }\n            }\n        }\n        return new int[0];\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        int n = nums.size();\n        for (int i = 0; i < n; ++i) {\n            for (int j = i + 1; j < n; ++j) {\n                if (nums[i] + nums[j] == target) {\n                    return {i, j};\n                }\n            }\n        }\n        return {};\n    }\n};\n```\n\n```C [sol1-C]\nint* twoSum(int* nums, int numsSize, int target, int* returnSize) {\n    for (int i = 0; i < numsSize; ++i) {\n        for (int j = i + 1; j < numsSize; ++j) {\n            if (nums[i] + nums[j] == target) {\n                int* ret = malloc(sizeof(int) * 2);\n                ret[0] = i, ret[1] = j;\n                *returnSize = 2;\n                return ret;\n            }\n        }\n    }\n    *returnSize = 0;\n    return NULL;\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        n = len(nums)\n        for i in range(n):\n            for j in range(i + 1, n):\n                if nums[i] + nums[j] == target:\n                    return [i, j]\n        \n        return []\n```\n\n```Golang [sol1-Golang]\nfunc twoSum(nums []int, target int) []int {\n    for i, x := range nums {\n        for j := i + 1; j < len(nums); j++ {\n            if x+nums[j] == target {\n                return []int{i, j}\n            }\n        }\n    }\n    return nil\n}\n```\n\n**\u590d\u6742\u5ea6\u5206\u6790**\n\n- \u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(N^2)$\uff0c\u5176\u4e2d $N$ \u662f\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u6570\u91cf\u3002\u6700\u574f\u60c5\u51b5\u4e0b\u6570\u7ec4\u4e2d\u4efb\u610f\u4e24\u4e2a\u6570\u90fd\u8981\u88ab\u5339\u914d\u4e00\u6b21\u3002\n\n- \u7a7a\u95f4\u590d\u6742\u5ea6\uff1a$O(1)$\u3002\n\n#### \u65b9\u6cd5\u4e8c\uff1a\u54c8\u5e0c\u8868\n\n**\u601d\u8def\u53ca\u7b97\u6cd5**\n\n\u6ce8\u610f\u5230\u65b9\u6cd5\u4e00\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u8f83\u9ad8\u7684\u539f\u56e0\u662f\u5bfb\u627e `target - x` \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u8fc7\u9ad8\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u4e00\u79cd\u66f4\u4f18\u79c0\u7684\u65b9\u6cd5\uff0c\u80fd\u591f\u5feb\u901f\u5bfb\u627e\u6570\u7ec4\u4e2d\u662f\u5426\u5b58\u5728\u76ee\u6807\u5143\u7d20\u3002\u5982\u679c\u5b58\u5728\uff0c\u6211\u4eec\u9700\u8981\u627e\u51fa\u5b83\u7684\u7d22\u5f15\u3002\n\n\u4f7f\u7528\u54c8\u5e0c\u8868\uff0c\u53ef\u4ee5\u5c06\u5bfb\u627e `target - x` \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u4f4e\u5230\u4ece $O(N)$ \u964d\u4f4e\u5230 $O(1)$\u3002\n\n\u8fd9\u6837\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u54c8\u5e0c\u8868\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a `x`\uff0c\u6211\u4eec\u9996\u5148\u67e5\u8be2\u54c8\u5e0c\u8868\u4e2d\u662f\u5426\u5b58\u5728 `target - x`\uff0c\u7136\u540e\u5c06 `x` \u63d2\u5165\u5230\u54c8\u5e0c\u8868\u4e2d\uff0c\u5373\u53ef\u4fdd\u8bc1\u4e0d\u4f1a\u8ba9 `x` \u548c\u81ea\u5df1\u5339\u914d\u3002\n\n**\u4ee3\u7801**\n\n```Java [sol2-Java]\nclass Solution {\n    public int[] twoSum(int[] nums, int target) {\n        Map<Integer, Integer> hashtable = new HashMap<Integer, Integer>();\n        for (int i = 0; i < nums.length; ++i) {\n            if (hashtable.containsKey(target - nums[i])) {\n                return new int[]{hashtable.get(target - nums[i]), i};\n            }\n            hashtable.put(nums[i], i);\n        }\n        return new int[0];\n    }\n}\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        unordered_map<int, int> hashtable;\n        for (int i = 0; i < nums.size(); ++i) {\n            auto it = hashtable.find(target - nums[i]);\n            if (it != hashtable.end()) {\n                return {it->second, i};\n            }\n            hashtable[nums[i]] = i;\n        }\n        return {};\n    }\n};\n```\n\n```C [sol2-C]\nstruct hashTable {\n    int key;\n    int val;\n    UT_hash_handle hh;\n};\n\nstruct hashTable* hashtable;\n\nstruct hashTable* find(int ikey) {\n    struct hashTable* tmp;\n    HASH_FIND_INT(hashtable, &ikey, tmp);\n    return tmp;\n}\n\nvoid insert(int ikey, int ival) {\n    struct hashTable* it = find(ikey);\n    if (it == NULL) {\n        struct hashTable* tmp = malloc(sizeof(struct hashTable));\n        tmp->key = ikey, tmp->val = ival;\n        HASH_ADD_INT(hashtable, key, tmp);\n    } else {\n        it->val = ival;\n    }\n}\n\nint* twoSum(int* nums, int numsSize, int target, int* returnSize) {\n    hashtable = NULL;\n    for (int i = 0; i < numsSize; i++) {\n        struct hashTable* it = find(target - nums[i]);\n        if (it != NULL) {\n            int* ret = malloc(sizeof(int) * 2);\n            ret[0] = it->val, ret[1] = i;\n            *returnSize = 2;\n            return ret;\n        }\n        insert(nums[i], i);\n    }\n    *returnSize = 0;\n    return NULL;\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        hashtable = dict()\n        for i, num in enumerate(nums):\n            if target - num in hashtable:\n                return [hashtable[target - num], i]\n            hashtable[nums[i]] = i\n        return []\n```\n\n```Golang [sol2-Golang]\nfunc twoSum(nums []int, target int) []int {\n    hashTable := map[int]int{}\n    for i, x := range nums {\n        if p, ok := hashTable[target-x]; ok {\n            return []int{p, i}\n        }\n        hashTable[x] = i\n    }\n    return nil\n}\n```\n\n**\u590d\u6742\u5ea6\u5206\u6790**\n\n- \u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(N)$\uff0c\u5176\u4e2d $N$ \u662f\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u6570\u91cf\u3002\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5143\u7d20 `x`\uff0c\u6211\u4eec\u53ef\u4ee5 $O(1)$ \u5730\u5bfb\u627e `target - x`\u3002\n\n- \u7a7a\u95f4\u590d\u6742\u5ea6\uff1a$O(N)$\uff0c\u5176\u4e2d $N$ \u662f\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u6570\u91cf\u3002\u4e3b\u8981\u4e3a\u54c8\u5e0c\u8868\u7684\u5f00\u9500\u3002\n"
}