{
  "content": "In this problem, we can go row by row, and in each position, we need to check if the `column`, the `45\\xb0 diagonal` and the `135\\xb0 diagonal` had a queen before.\\n\\n**Solution A:** Directly check the validity of each position, *12ms*:\\n\\n    class Solution {\\n    public:\\n        std::vector<std::vector<std::string> > solveNQueens(int n) {\\n            std::vector<std::vector<std::string> > res;\\n            std::vector<std::string> nQueens(n, std::string(n, '.'));\\n            solveNQueens(res, nQueens, 0, n);\\n            return res;\\n        }\\n    private:\\n        void solveNQueens(std::vector<std::vector<std::string> > &res, std::vector<std::string> &nQueens, int row, int &n) {\\n            if (row == n) {\\n                res.push_back(nQueens);\\n                return;\\n            }\\n            for (int col = 0; col != n; ++col)\\n                if (isValid(nQueens, row, col, n)) {\\n                    nQueens[row][col] = 'Q';\\n                    solveNQueens(res, nQueens, row + 1, n);\\n                    nQueens[row][col] = '.';\\n                }\\n        }\\n        bool isValid(std::vector<std::string> &nQueens, int row, int col, int &n) {\\n            //check if the column had a queen before.\\n            for (int i = 0; i != row; ++i)\\n                if (nQueens[i][col] == 'Q')\\n                    return false;\\n            //check if the 45\\xb0 diagonal had a queen before.\\n            for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j)\\n                if (nQueens[i][j] == 'Q')\\n                    return false;\\n            //check if the 135\\xb0 diagonal had a queen before.\\n            for (int i = row - 1, j = col + 1; i >= 0 && j < n; --i, ++j)\\n                if (nQueens[i][j] == 'Q')\\n                    return false;\\n            return true;\\n        }\\n    };\\n\\n**Solution B:** Use flag vectors as bitmask, *4ms*:\\n\\nThe number of columns is `n`,  the number of 45\\xb0 diagonals is `2 * n - 1`,  the number of 135\\xb0 diagonals is also `2 * n - 1`. When reach `[row, col]`, the column No. is `col`, the 45\\xb0 diagonal No. is `row + col` and the 135\\xb0 diagonal No. is `n - 1 + col - row`. We can use three arrays to indicate if the column or the diagonal had a queen before, if not, we can put a queen in this position and continue. \\n\\n**NOTE:** Please don't use `vector<bool> flag` to replace `vector<int> flag` in the following C++ code. In fact, `vector<bool>` is not a STL container. You should avoid to use it. You can also get the knowledge from [here](http://stackoverflow.com/questions/17794569/why-is-vectorbool-not-a-stl-container) and [here](http://stackoverflow.com/questions/670308/alternative-to-vectorbool).\\n\\n    /**    | | |                / / /             \\\\ \\\\ \\\\\\n      *    O O O               O O O               O O O\\n      *    | | |              / / / /             \\\\ \\\\ \\\\ \\\\\\n      *    O O O               O O O               O O O\\n      *    | | |              / / / /             \\\\ \\\\ \\\\ \\\\ \\n      *    O O O               O O O               O O O\\n      *    | | |              / / /                 \\\\ \\\\ \\\\\\n      *   3 columns        5 45\\xb0 diagonals     5 135\\xb0 diagonals    (when n is 3)\\n      */\\n    class Solution {\\n    public:\\n        std::vector<std::vector<std::string> > solveNQueens(int n) {\\n            std::vector<std::vector<std::string> > res;\\n            std::vector<std::string> nQueens(n, std::string(n, '.'));\\n            std::vector<int> flag_col(n, 1), flag_45(2 * n - 1, 1), flag_135(2 * n - 1, 1);\\n            solveNQueens(res, nQueens, flag_col, flag_45, flag_135, 0, n);\\n            return res;\\n        }\\n    private:\\n        void solveNQueens(std::vector<std::vector<std::string> > &res, std::vector<std::string> &nQueens, std::vector<int> &flag_col, std::vector<int> &flag_45, std::vector<int> &flag_135, int row, int &n) {\\n            if (row == n) {\\n                res.push_back(nQueens);\\n                return;\\n            }\\n            for (int col = 0; col != n; ++col)\\n                if (flag_col[col] && flag_45[row + col] && flag_135[n - 1 + col - row]) {\\n                    flag_col[col] = flag_45[row + col] = flag_135[n - 1 + col - row] = 0;\\n                    nQueens[row][col] = 'Q';\\n                    solveNQueens(res, nQueens, flag_col, flag_45, flag_135, row + 1, n);\\n                    nQueens[row][col] = '.';\\n                    flag_col[col] = flag_45[row + col] = flag_135[n - 1 + col - row] = 1;\\n                }\\n        }\\n    };\\n\\nBut we actually do not need to use three arrays, we just need one. Now, when reach `[row, col]`, the subscript of column is `col`, the subscript of 45\\xb0 diagonal is `n + row + col` and the subscript of 135\\xb0 diagonal  is `n + 2 * n - 1 + n - 1 + col - row`.\\n\\n    class Solution {\\n    public:\\n        std::vector<std::vector<std::string> > solveNQueens(int n) {\\n            std::vector<std::vector<std::string> > res;\\n            std::vector<std::string> nQueens(n, std::string(n, '.'));\\n            /*\\n            flag[0] to flag[n - 1] to indicate if the column had a queen before.\\n            flag[n] to flag[3 * n - 2] to indicate if the 45\\xb0 diagonal had a queen before.\\n            flag[3 * n - 1] to flag[5 * n - 3] to indicate if the 135\\xb0 diagonal had a queen before.\\n            */\\n            std::vector<int> flag(5 * n - 2, 1);\\n            solveNQueens(res, nQueens, flag, 0, n);\\n            return res;\\n        }\\n    private:\\n        void solveNQueens(std::vector<std::vector<std::string> > &res, std::vector<std::string> &nQueens, std::vector<int> &flag, int row, int &n) {\\n            if (row == n) {\\n                res.push_back(nQueens);\\n                return;\\n            }\\n            for (int col = 0; col != n; ++col)\\n                if (flag[col] && flag[n + row + col] && flag[4 * n - 2 + col - row]) {\\n                    flag[col] = flag[n + row + col] = flag[4 * n - 2 + col - row] = 0;\\n                    nQueens[row][col] = 'Q';\\n                    solveNQueens(res, nQueens, flag, row + 1, n);\\n                    nQueens[row][col] = '.';\\n                    flag[col] = flag[n + row + col] = flag[4 * n - 2 + col - row] = 1;\\n                }\\n        }\\n    };"
}